{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { clearField } from \"../../../Indicators/ShowNextMoves\";\nimport togglePointerEvents from \"../Pawn promotion/togglePointerEvents\";\nimport doCastling from \"./Related with king/Castle king\";\nimport removePiece from \"./Remove piece\";\nimport maybeCastlingPiecesMoved from \"./Related with king/Mby castling pieces moved\";\nimport updateState from \"./Update state\";\nimport { recentPieceCrd } from \"../../piece\";\nimport { gameField } from \"../../Gamefield\";\nimport { setPromoted } from \"../Pawn promotion/Promotion\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { clearNextMoves, setCheck, setTurn, movePiece, setSelected } from '../../../../../features/chess/chessSlice';\nexport let turn = \"w\";\nexport const turns = {\n  \"w\": \"b\",\n  \"b\": \"w\"\n};\nexport let enPassing;\nexport let castlingMoved = [];\nexport let clearCastlingMoved = () => castlingMoved = [];\nexport default function useMovePiece(x2, y2) {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    selected\n  } = useSelector(store => store.chess);\n  if (!selected) return () => {};\n  const {\n    x,\n    y,\n    name: [color, name]\n  } = selected;\n  return () => {\n    dispatch(movePiece([x2, y2])); // if (name === \"K\" && Math.abs(x2 - x1) > 1){\n    //     updateState(doCastling, [x2, y2], true)\n    //     return\n    // }\n    // if (gameField[y2][x2] !== \"0\") {\n    //     removePiece(x2, y2)\n    // }\n    // else if (name === \"P\" && x1 !== x2 && gameField[y2][x2] === \"0\"){\n    //     removePiece(x2, y1)\n    // }\n    // enPassing = name === \"P\" &&\n    //     Math.abs(y2 - y1) === 2 ?\n    //         {x: x2, y: y2} : false\n    // if (name === \"P\"  && (y2 === 7 || y2 === 0)){\n    //     setPromoted([x2, y2])\n    //     togglePointerEvents(\"none\")\n    // }\n    // maybeCastlingPiecesMoved(color, name, x1)\n    // updateState(setPiece,{\n    //         x: x2,\n    //         y: y2,\n    //         from: {x: x1, y: y1}\n    //     })\n  };\n}\n\n_s(useMovePiece, \"oKihN9B1B6jd3wS3LOWIM65IE44=\", false, function () {\n  return [useDispatch, useSelector];\n});","map":{"version":3,"names":["clearField","togglePointerEvents","doCastling","removePiece","maybeCastlingPiecesMoved","updateState","recentPieceCrd","gameField","setPromoted","useDispatch","useSelector","clearNextMoves","setCheck","setTurn","movePiece","setSelected","turn","turns","enPassing","castlingMoved","clearCastlingMoved","useMovePiece","x2","y2","dispatch","selected","store","chess","x","y","name","color"],"sources":["C:/Users/alapc/OneDrive/Documents/Programming/chess/src/Chessboard/Game/Pieces/Logic/Move piece/Move piece.js"],"sourcesContent":["import {clearField} from \"../../../Indicators/ShowNextMoves\";\r\nimport togglePointerEvents from \"../Pawn promotion/togglePointerEvents\";\r\nimport doCastling from \"./Related with king/Castle king\";\r\nimport removePiece from \"./Remove piece\";\r\nimport maybeCastlingPiecesMoved from \"./Related with king/Mby castling pieces moved\";\r\nimport updateState from \"./Update state\";\r\nimport {recentPieceCrd} from \"../../piece\";\r\nimport {gameField} from \"../../Gamefield\";\r\nimport {setPromoted} from \"../Pawn promotion/Promotion\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { clearNextMoves,setCheck, setTurn, movePiece, setSelected } from '../../../../../features/chess/chessSlice';\r\n\r\nexport let turn = \"w\"\r\n\r\nexport const turns = {\"w\": \"b\", \"b\": \"w\"}\r\n\r\nexport let enPassing\r\nexport let castlingMoved = []\r\nexport let clearCastlingMoved = () => castlingMoved = []\r\n\r\nexport default function useMovePiece(x2, y2){\r\n\r\n    const dispatch = useDispatch()\r\n    const { selected } = useSelector(store => store.chess)\r\n\r\n    if (!selected) return () => { }\r\n\r\n    const { x, y, name: [color, name] } = selected\r\n\r\n    return () => {\r\n        dispatch(movePiece([x2, y2]))\r\n        // if (name === \"K\" && Math.abs(x2 - x1) > 1){\r\n        //     updateState(doCastling, [x2, y2], true)\r\n        //     return\r\n        // }\r\n\r\n        // if (gameField[y2][x2] !== \"0\") {\r\n        //     removePiece(x2, y2)\r\n        // }\r\n\r\n        // else if (name === \"P\" && x1 !== x2 && gameField[y2][x2] === \"0\"){\r\n        //     removePiece(x2, y1)\r\n        // }\r\n\r\n        // enPassing = name === \"P\" &&\r\n        //     Math.abs(y2 - y1) === 2 ?\r\n        //         {x: x2, y: y2} : false\r\n\r\n        // if (name === \"P\"  && (y2 === 7 || y2 === 0)){\r\n        //     setPromoted([x2, y2])\r\n        //     togglePointerEvents(\"none\")\r\n        // }\r\n\r\n        // maybeCastlingPiecesMoved(color, name, x1)\r\n\r\n        // updateState(setPiece,{\r\n        //         x: x2,\r\n        //         y: y2,\r\n        //         from: {x: x1, y: y1}\r\n            //     })\r\n    }\r\n}\r\n"],"mappings":";;AAAA,SAAQA,UAAR,QAAyB,mCAAzB;AACA,OAAOC,mBAAP,MAAgC,uCAAhC;AACA,OAAOC,UAAP,MAAuB,iCAAvB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,wBAAP,MAAqC,+CAArC;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAAQC,cAAR,QAA6B,aAA7B;AACA,SAAQC,SAAR,QAAwB,iBAAxB;AACA,SAAQC,WAAR,QAA0B,6BAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,cAAT,EAAwBC,QAAxB,EAAkCC,OAAlC,EAA2CC,SAA3C,EAAsDC,WAAtD,QAAyE,0CAAzE;AAEA,OAAO,IAAIC,IAAI,GAAG,GAAX;AAEP,OAAO,MAAMC,KAAK,GAAG;EAAC,KAAK,GAAN;EAAW,KAAK;AAAhB,CAAd;AAEP,OAAO,IAAIC,SAAJ;AACP,OAAO,IAAIC,aAAa,GAAG,EAApB;AACP,OAAO,IAAIC,kBAAkB,GAAG,MAAMD,aAAa,GAAG,EAA/C;AAEP,eAAe,SAASE,YAAT,CAAsBC,EAAtB,EAA0BC,EAA1B,EAA6B;EAAA;;EAExC,MAAMC,QAAQ,GAAGf,WAAW,EAA5B;EACA,MAAM;IAAEgB;EAAF,IAAef,WAAW,CAACgB,KAAK,IAAIA,KAAK,CAACC,KAAhB,CAAhC;EAEA,IAAI,CAACF,QAAL,EAAe,OAAO,MAAM,CAAG,CAAhB;EAEf,MAAM;IAAEG,CAAF;IAAKC,CAAL;IAAQC,IAAI,EAAE,CAACC,KAAD,EAAQD,IAAR;EAAd,IAAgCL,QAAtC;EAEA,OAAO,MAAM;IACTD,QAAQ,CAACV,SAAS,CAAC,CAACQ,EAAD,EAAKC,EAAL,CAAD,CAAV,CAAR,CADS,CAET;IACA;IACA;IACA;IAEA;IACA;IACA;IAEA;IACA;IACA;IAEA;IACA;IACA;IAEA;IACA;IACA;IACA;IAEA;IAEA;IACA;IACA;IACA;IACI;EACP,CA/BD;AAgCH;;GAzCuBF,Y;UAEHZ,W,EACIC,W"},"metadata":{},"sourceType":"module"}