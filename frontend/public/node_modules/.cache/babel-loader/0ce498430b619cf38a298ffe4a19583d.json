{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport checkForChecks from \"../King activity/Checks\";\nimport { useSelector } from \"react-redux\";\nexport default function useCanCastle(x, y) {\n  _s();\n\n  const {\n    gameField,\n    turn,\n    castlingMoved\n  } = useSelector(store => store.chess);\n  if (gameField[y][x] !== \"K\") return [];\n  let castlingMoves = []; // for (let rook of [x-4, x+3]) {\n  //     if (x !== 4\n  //         || gameField[y][rook] !== turn + \"R\"\n  //         || castlingMoved.includes(gameField[y][x])\n  //         || castlingMoved.includes(rook + turn + \"R\")\n  //         || checkForChecks([x, y])\n  //     ) continue\n  //     let k = rook > 4? 1: -1\n  //     if (\n  //         (checkForChecks([4 + k, y]) || gameField[y][4 + k] !== \"0\") ||\n  //         (checkForChecks([4 + 2*k, y]) || gameField[y][4 + 2*k] !== \"0\")\n  //     ) continue\n  //     castlingMoves.push([rook, y])\n  // }\n\n  return castlingMoves;\n}\n\n_s(useCanCastle, \"gTG0GrVt39o3gAKfBY6HtYSgihY=\", false, function () {\n  return [useSelector];\n});","map":{"version":3,"names":["checkForChecks","useSelector","useCanCastle","x","y","gameField","turn","castlingMoved","store","chess","castlingMoves"],"sources":["C:/Users/alapc/OneDrive/Documents/Programming/chess/src/Chessboard/Game/Pieces/Logic/Next moves/Allow castling.js"],"sourcesContent":["import checkForChecks from \"../King activity/Checks\";\r\nimport { useSelector } from \"react-redux\"\r\n\r\nexport default function useCanCastle(x, y) {\r\n\r\n    const { gameField, turn, castlingMoved } = useSelector(store => store.chess)\r\n    \r\n    if (gameField[y][x] !== \"K\")\r\n        return []\r\n    \r\n    let castlingMoves = []\r\n    // for (let rook of [x-4, x+3]) {\r\n\r\n    //     if (x !== 4\r\n    //         || gameField[y][rook] !== turn + \"R\"\r\n    //         || castlingMoved.includes(gameField[y][x])\r\n    //         || castlingMoved.includes(rook + turn + \"R\")\r\n    //         || checkForChecks([x, y])\r\n    //     ) continue\r\n\r\n    //     let k = rook > 4? 1: -1\r\n\r\n    //     if (\r\n    //         (checkForChecks([4 + k, y]) || gameField[y][4 + k] !== \"0\") ||\r\n    //         (checkForChecks([4 + 2*k, y]) || gameField[y][4 + 2*k] !== \"0\")\r\n    //     ) continue\r\n\r\n    //     castlingMoves.push([rook, y])\r\n    // }\r\n\r\n    return castlingMoves\r\n}"],"mappings":";;AAAA,OAAOA,cAAP,MAA2B,yBAA3B;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,eAAe,SAASC,YAAT,CAAsBC,CAAtB,EAAyBC,CAAzB,EAA4B;EAAA;;EAEvC,MAAM;IAAEC,SAAF;IAAaC,IAAb;IAAmBC;EAAnB,IAAqCN,WAAW,CAACO,KAAK,IAAIA,KAAK,CAACC,KAAhB,CAAtD;EAEA,IAAIJ,SAAS,CAACD,CAAD,CAAT,CAAaD,CAAb,MAAoB,GAAxB,EACI,OAAO,EAAP;EAEJ,IAAIO,aAAa,GAAG,EAApB,CAPuC,CAQvC;EAEA;EACA;EACA;EACA;EACA;EACA;EAEA;EAEA;EACA;EACA;EACA;EAEA;EACA;;EAEA,OAAOA,aAAP;AACH;;GA5BuBR,Y;UAEuBD,W"},"metadata":{},"sourceType":"module"}