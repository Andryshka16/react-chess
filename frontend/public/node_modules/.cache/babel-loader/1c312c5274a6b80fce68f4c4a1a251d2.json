{"ast":null,"code":"var _s = $RefreshSig$();\n\n// import {clearField} from \"../../../Indicators/ShowNextMoves\";\n// import togglePointerEvents from \"../Pawn promotion/togglePointerEvents\";\n// import doCastling from \"./Related with king/Castle king\";\n// import removePiece from \"./Remove piece\";\n// import maybeCastlingPiecesMoved from \"./Related with king/Mby castling pieces moved\";\n// import updateState from \"./Update state\";\n// import {recentPieceCrd} from \"../../piece\";\n// import {gameField} from \"../../Gamefield\";\n// import {setPromoted} from \"../Pawn promotion/Promotion\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { clearNextMoves, setCheck, setTurn, movePiece, setSelected, castle } from '../../../../../features/chess/chessSlice';\nexport let turn = \"w\";\nexport const turns = {\n  \"w\": \"b\",\n  \"b\": \"w\"\n};\nexport let enPassing;\nexport let castlingMoved = [];\nexport let clearCastlingMoved = () => castlingMoved = [];\nexport default function useMovePiece() {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    selected\n  } = useSelector(store => store.chess);\n  return (x2, y2) => {\n    if (name[1] === \"K\" && Math.abs(x2 - x) > 1) {\n      dispatch(castle([x2, y2]));\n      return;\n    } // else if (name === \"P\" && x1 !== x2 && gameField[y2][x2] === \"0\"){\n    //     removePiece(x2, y1)\n    // }\n    // enPassing = name === \"P\" &&\n    //     Math.abs(y2 - y1) === 2 ?\n    //         {x: x2, y: y2} : false\n    // if (name === \"P\"  && (y2 === 7 || y2 === 0)){\n    //     setPromoted([x2, y2])\n    //     togglePointerEvents(\"none\")\n    // }\n    // maybeCastlingPiecesMoved(color, name, x1)\n\n\n    dispatch(movePiece([x2, y2]));\n  };\n}\n\n_s(useMovePiece, \"oKihN9B1B6jd3wS3LOWIM65IE44=\", false, function () {\n  return [useDispatch, useSelector];\n});","map":{"version":3,"names":["useDispatch","useSelector","clearNextMoves","setCheck","setTurn","movePiece","setSelected","castle","turn","turns","enPassing","castlingMoved","clearCastlingMoved","useMovePiece","dispatch","selected","store","chess","x2","y2","name","Math","abs","x"],"sources":["C:/Users/alapc/OneDrive/Documents/Programming/chess/src/Chessboard/Game/Pieces/Logic/Move piece/Move piece.js"],"sourcesContent":["// import {clearField} from \"../../../Indicators/ShowNextMoves\";\r\n// import togglePointerEvents from \"../Pawn promotion/togglePointerEvents\";\r\n// import doCastling from \"./Related with king/Castle king\";\r\n// import removePiece from \"./Remove piece\";\r\n// import maybeCastlingPiecesMoved from \"./Related with king/Mby castling pieces moved\";\r\n// import updateState from \"./Update state\";\r\n// import {recentPieceCrd} from \"../../piece\";\r\n// import {gameField} from \"../../Gamefield\";\r\n// import {setPromoted} from \"../Pawn promotion/Promotion\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { clearNextMoves,setCheck, setTurn, movePiece, setSelected, castle } from '../../../../../features/chess/chessSlice';\r\n\r\nexport let turn = \"w\"\r\n\r\nexport const turns = {\"w\": \"b\", \"b\": \"w\"}\r\n\r\nexport let enPassing\r\nexport let castlingMoved = []\r\nexport let clearCastlingMoved = () => castlingMoved = []\r\n\r\nexport default function useMovePiece(){\r\n\r\n    const dispatch = useDispatch()\r\n    const { selected } = useSelector(store => store.chess)\r\n\r\n    return (x2, y2) => {\r\n\r\n\r\n        if (name[1] === \"K\" && Math.abs(x2 - x) > 1) {\r\n            dispatch(castle([x2, y2]))\r\n            return\r\n        }\r\n\r\n        // else if (name === \"P\" && x1 !== x2 && gameField[y2][x2] === \"0\"){\r\n        //     removePiece(x2, y1)\r\n        // }\r\n\r\n        // enPassing = name === \"P\" &&\r\n        //     Math.abs(y2 - y1) === 2 ?\r\n        //         {x: x2, y: y2} : false\r\n\r\n        // if (name === \"P\"  && (y2 === 7 || y2 === 0)){\r\n        //     setPromoted([x2, y2])\r\n        //     togglePointerEvents(\"none\")\r\n        // }\r\n\r\n        // maybeCastlingPiecesMoved(color, name, x1)\r\n\r\n        dispatch(movePiece([x2, y2]))\r\n\r\n    }\r\n}\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,cAAT,EAAwBC,QAAxB,EAAkCC,OAAlC,EAA2CC,SAA3C,EAAsDC,WAAtD,EAAmEC,MAAnE,QAAiF,0CAAjF;AAEA,OAAO,IAAIC,IAAI,GAAG,GAAX;AAEP,OAAO,MAAMC,KAAK,GAAG;EAAC,KAAK,GAAN;EAAW,KAAK;AAAhB,CAAd;AAEP,OAAO,IAAIC,SAAJ;AACP,OAAO,IAAIC,aAAa,GAAG,EAApB;AACP,OAAO,IAAIC,kBAAkB,GAAG,MAAMD,aAAa,GAAG,EAA/C;AAEP,eAAe,SAASE,YAAT,GAAuB;EAAA;;EAElC,MAAMC,QAAQ,GAAGd,WAAW,EAA5B;EACA,MAAM;IAAEe;EAAF,IAAed,WAAW,CAACe,KAAK,IAAIA,KAAK,CAACC,KAAhB,CAAhC;EAEA,OAAO,CAACC,EAAD,EAAKC,EAAL,KAAY;IAGf,IAAIC,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAZ,IAAmBC,IAAI,CAACC,GAAL,CAASJ,EAAE,GAAGK,CAAd,IAAmB,CAA1C,EAA6C;MACzCT,QAAQ,CAACP,MAAM,CAAC,CAACW,EAAD,EAAKC,EAAL,CAAD,CAAP,CAAR;MACA;IACH,CANc,CAQf;IACA;IACA;IAEA;IACA;IACA;IAEA;IACA;IACA;IACA;IAEA;;;IAEAL,QAAQ,CAACT,SAAS,CAAC,CAACa,EAAD,EAAKC,EAAL,CAAD,CAAV,CAAR;EAEH,CAzBD;AA0BH;;GA/BuBN,Y;UAEHb,W,EACIC,W"},"metadata":{},"sourceType":"module"}