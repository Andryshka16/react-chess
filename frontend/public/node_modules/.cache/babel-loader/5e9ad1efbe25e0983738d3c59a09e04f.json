{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport kingCoordinates from '../King activity/Find king';\nimport checkForDraw from '../King activity/Draw';\nimport useCheckForChecks from '../King activity/Checks';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setCheck } from '../../../../../features/chess/chessSlice';\nexport let coverMoves = [];\nexport const clearCoverMoves = () => coverMoves = [];\nexport default function useCheckSituation() {\n  _s();\n\n  const {\n    turn\n  } = useSelector(store => store.chess);\n  const dispatch = useDispatch();\n  const checkForChecks = useCheckForChecks();\n  const king = kingCoordinates(turn + 'K');\n  return () => {\n    console.log();\n\n    if (checkForChecks(king)) {\n      console.log('CHECK!');\n      dispatch(setCheck(king)); // if (checkMate(king, checkCRD)) {\n      // \tconsole.log('MATE, GAME OVER!')\n      // }\n    } // if (checkForDraw(turn) && !checkForChecks(king)) {\n    // \tconsole.log('DRAW, GAME OVER!')\n    // }\n\n  };\n}\n\n_s(useCheckSituation, \"gz+Mec0S4UATrn152lkNFxbWuOs=\", false, function () {\n  return [useSelector, useDispatch, useCheckForChecks];\n});","map":{"version":3,"names":["kingCoordinates","checkForDraw","useCheckForChecks","useDispatch","useSelector","setCheck","coverMoves","clearCoverMoves","useCheckSituation","turn","store","chess","dispatch","checkForChecks","king","console","log"],"sources":["C:/Users/alapc/OneDrive/Documents/Programming/chess/src/Chessboard/Game/Pieces/Logic/Move piece/Check situation.js"],"sourcesContent":["import kingCoordinates from '../King activity/Find king'\r\nimport checkForDraw from '../King activity/Draw'\r\nimport useCheckForChecks from '../King activity/Checks'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setCheck } from '../../../../../features/chess/chessSlice'\r\n\r\nexport let coverMoves = []\r\nexport const clearCoverMoves = () => (coverMoves = [])\r\n\r\nexport default function useCheckSituation() {\r\n\tconst { turn } = useSelector((store) => store.chess)\r\n\tconst dispatch = useDispatch()\r\n\tconst checkForChecks = useCheckForChecks()\r\n\tconst king = kingCoordinates(turn + 'K')\r\n\r\n    return () => {\r\n        console.log();\r\n\t\tif (checkForChecks(king)) {\r\n\t\t\tconsole.log('CHECK!')\r\n\t\t\tdispatch(setCheck(king))\r\n\r\n\t\t\t// if (checkMate(king, checkCRD)) {\r\n\t\t\t// \tconsole.log('MATE, GAME OVER!')\r\n\t\t\t// }\r\n\t\t}\r\n\r\n\t\t// if (checkForDraw(turn) && !checkForChecks(king)) {\r\n\t\t// \tconsole.log('DRAW, GAME OVER!')\r\n\t\t// }\r\n\t}\r\n}\r\n"],"mappings":";;AAAA,OAAOA,eAAP,MAA4B,4BAA5B;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,iBAAP,MAA8B,yBAA9B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,QAAT,QAAyB,0CAAzB;AAEA,OAAO,IAAIC,UAAU,GAAG,EAAjB;AACP,OAAO,MAAMC,eAAe,GAAG,MAAOD,UAAU,GAAG,EAA5C;AAEP,eAAe,SAASE,iBAAT,GAA6B;EAAA;;EAC3C,MAAM;IAAEC;EAAF,IAAWL,WAAW,CAAEM,KAAD,IAAWA,KAAK,CAACC,KAAlB,CAA5B;EACA,MAAMC,QAAQ,GAAGT,WAAW,EAA5B;EACA,MAAMU,cAAc,GAAGX,iBAAiB,EAAxC;EACA,MAAMY,IAAI,GAAGd,eAAe,CAACS,IAAI,GAAG,GAAR,CAA5B;EAEG,OAAO,MAAM;IACTM,OAAO,CAACC,GAAR;;IACN,IAAIH,cAAc,CAACC,IAAD,CAAlB,EAA0B;MACzBC,OAAO,CAACC,GAAR,CAAY,QAAZ;MACAJ,QAAQ,CAACP,QAAQ,CAACS,IAAD,CAAT,CAAR,CAFyB,CAIzB;MACA;MACA;IACA,CATc,CAWf;IACA;IACA;;EACA,CAdE;AAeH;;GArBuBN,iB;UACNJ,W,EACAD,W,EACMD,iB"},"metadata":{},"sourceType":"module"}