{"ast":null,"code":"// import {getNextMove} from \"../Next moves/NextMoves\";\n// import {checkForChecks} from \"./Checks\";\n// import {turn} from \"../Move piece/Move piece\";\n// import {coverMoves} from \"../Move piece/Related with king/Check situation\";\n// import {gameField} from \"../../Gamefield\";\n// export let kingEscape = []\n// export function checkMate(king, check) {\n//     let [x1, y1] = king\n//     let [x2, y2] = check\n//     kingEscape = [...getNextMove([x1, y1],true)]\n//     if (checkForChecks([x1,y1]) > 1){\n//         if (kingEscape.length) {\n//             coverMoves.push(\"Double mate\")\n//             return false\n//         }\n//         else {\n//             return true\n//         }\n//     }\n//     let xK = x1===x2? 0: 1\n//     let yK = y1===y2? 0: 1\n//     if (gameField[y2][x2][1] !== \"N\"){\n//         for (let i = 1; i * xK + Math.min(x1, x2) < Math.max(x1, x2) ||\n//                         i * yK + Math.min(y1, y2) < Math.max(y1, y2); i++){\n//             coverMoves.push([\n//                 x1 + (x1 < x2 ? i: -i) * xK,\n//                 y1 + (y1 < y2 ? i: -i) * yK\n//                 ]\n//             )\n//         }\n//     }\n//     coverMoves.push([x2,y2])\n//     for (let y = 0; y < 8; y++){\n//         for (let x = 0; x < 8; x++){\n//             let piece = gameField[y][x]\n//             if (piece[0] === turn && getNextMove([x,y],true).length){\n//                 return false\n//             }\n//         }\n//     }\n//     return true\n// }","map":{"version":3,"names":[],"sources":["C:/Users/alapc/OneDrive/Documents/Programming/chess/src/Chessboard/Game/Pieces/Logic/King activity/Mates.js"],"sourcesContent":["// import {getNextMove} from \"../Next moves/NextMoves\";\r\n// import {checkForChecks} from \"./Checks\";\r\n// import {turn} from \"../Move piece/Move piece\";\r\n// import {coverMoves} from \"../Move piece/Related with king/Check situation\";\r\n// import {gameField} from \"../../Gamefield\";\r\n\r\n// export let kingEscape = []\r\n\r\n// export function checkMate(king, check) {\r\n\r\n//     let [x1, y1] = king\r\n//     let [x2, y2] = check\r\n\r\n//     kingEscape = [...getNextMove([x1, y1],true)]\r\n\r\n//     if (checkForChecks([x1,y1]) > 1){\r\n\r\n//         if (kingEscape.length) {\r\n//             coverMoves.push(\"Double mate\")\r\n//             return false\r\n//         }\r\n//         else {\r\n//             return true\r\n//         }\r\n//     }\r\n\r\n//     let xK = x1===x2? 0: 1\r\n//     let yK = y1===y2? 0: 1\r\n\r\n//     if (gameField[y2][x2][1] !== \"N\"){\r\n\r\n//         for (let i = 1; i * xK + Math.min(x1, x2) < Math.max(x1, x2) ||\r\n//                         i * yK + Math.min(y1, y2) < Math.max(y1, y2); i++){\r\n\r\n//             coverMoves.push([\r\n//                 x1 + (x1 < x2 ? i: -i) * xK,\r\n//                 y1 + (y1 < y2 ? i: -i) * yK\r\n//                 ]\r\n//             )\r\n//         }\r\n//     }\r\n//     coverMoves.push([x2,y2])\r\n\r\n//     for (let y = 0; y < 8; y++){\r\n//         for (let x = 0; x < 8; x++){\r\n\r\n//             let piece = gameField[y][x]\r\n//             if (piece[0] === turn && getNextMove([x,y],true).length){\r\n//                 return false\r\n//             }\r\n//         }\r\n//     }\r\n\r\n//     return true\r\n// }"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA"},"metadata":{},"sourceType":"module"}