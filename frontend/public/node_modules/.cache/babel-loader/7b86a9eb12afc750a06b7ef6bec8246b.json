{"ast":null,"code":"// import React, { useContext } from 'react'\n// import togglePointerEvents from './togglePointerEvents'\n// import { turn, turns } from '../Move piece/Move piece'\n// import { PromotedContext } from './Promotion context'\n// export default function PromotionPiece({ index, name }) {\n// \tconst [promoted, setPromoted] = useContext(PromotedContext)\n// \tconst [x, y] = promoted\n// \tlet scales = {\n// \t\tQ: 0.85,\n// \t\tB: 0.8,\n// \t}\n// \tlet marginTop = {\n// \t\tQ: '3px',\n// \t\tR: '-1px',\n// \t}\n// \tlet scale = scales[name] || 0.7\n// \tconst styles = {\n// \t\ttop: `${Math.floor(index / 2) * 60}px`,\n// \t\tleft: `${(index % 2) * 60}px`,\n// \t\ttransform: `scale(${scale})`,\n// \t\tmarginTop: marginTop[name],\n// \t}\n// \tfunction handleMouseOver(event) {\n// \t\tevent.target.style.transform = `scale(${scale * 1.2})`\n// \t}\n// \tfunction handleMouseOut(event) {\n// \t\tevent.target.style.transform = `scale(${scale})`\n// \t}\n// \tfunction handleMouseClick() {\n// \t\tlet [x1, y1, , , setPiece] = recentPieceCrd\n// \t\ttogglePointerEvents('all')\n// \t\t// updateState(setPiece,{\n// \t\t//     name: turns[turn] + name,\n// \t\t//     x,\n// \t\t//     y,\n// \t\t//     from: {x: x1, y: y1}\n// \t\t// })\n// \t\tsetPromoted(false)\n// \t}\n// \treturn (\n// \t\t<img\n// \t\t\tsrc={`./images/${turns[turn] + name}.png`}\n// \t\t\talt={'failed'}\n// \t\t\tclassName={'figure'}\n// \t\t\tstyle={styles}\n// \t\t\tonMouseOver={handleMouseOver}\n// \t\t\tonMouseOut={handleMouseOut}\n// \t\t\tonClick={handleMouseClick}\n// \t\t></img>\n// \t)\n// }","map":{"version":3,"names":[],"sources":["C:/Users/alapc/OneDrive/Documents/Programming/chess/src/Chessboard/Game/Pieces/Logic/Pawn promotion/Promotion piece.js"],"sourcesContent":["// import React, { useContext } from 'react'\r\n// import togglePointerEvents from './togglePointerEvents'\r\n// import { turn, turns } from '../Move piece/Move piece'\r\n// import { PromotedContext } from './Promotion context'\r\n\r\n// export default function PromotionPiece({ index, name }) {\r\n// \tconst [promoted, setPromoted] = useContext(PromotedContext)\r\n// \tconst [x, y] = promoted\r\n\r\n// \tlet scales = {\r\n// \t\tQ: 0.85,\r\n// \t\tB: 0.8,\r\n// \t}\r\n\r\n// \tlet marginTop = {\r\n// \t\tQ: '3px',\r\n// \t\tR: '-1px',\r\n// \t}\r\n\r\n// \tlet scale = scales[name] || 0.7\r\n\r\n// \tconst styles = {\r\n// \t\ttop: `${Math.floor(index / 2) * 60}px`,\r\n// \t\tleft: `${(index % 2) * 60}px`,\r\n// \t\ttransform: `scale(${scale})`,\r\n// \t\tmarginTop: marginTop[name],\r\n// \t}\r\n\r\n// \tfunction handleMouseOver(event) {\r\n// \t\tevent.target.style.transform = `scale(${scale * 1.2})`\r\n// \t}\r\n\r\n// \tfunction handleMouseOut(event) {\r\n// \t\tevent.target.style.transform = `scale(${scale})`\r\n// \t}\r\n\r\n// \tfunction handleMouseClick() {\r\n// \t\tlet [x1, y1, , , setPiece] = recentPieceCrd\r\n// \t\ttogglePointerEvents('all')\r\n\r\n// \t\t// updateState(setPiece,{\r\n// \t\t//     name: turns[turn] + name,\r\n// \t\t//     x,\r\n// \t\t//     y,\r\n// \t\t//     from: {x: x1, y: y1}\r\n// \t\t// })\r\n\r\n// \t\tsetPromoted(false)\r\n// \t}\r\n\r\n// \treturn (\r\n// \t\t<img\r\n// \t\t\tsrc={`./images/${turns[turn] + name}.png`}\r\n// \t\t\talt={'failed'}\r\n// \t\t\tclassName={'figure'}\r\n// \t\t\tstyle={styles}\r\n// \t\t\tonMouseOver={handleMouseOver}\r\n// \t\t\tonMouseOut={handleMouseOut}\r\n// \t\t\tonClick={handleMouseClick}\r\n// \t\t></img>\r\n// \t)\r\n// }\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}