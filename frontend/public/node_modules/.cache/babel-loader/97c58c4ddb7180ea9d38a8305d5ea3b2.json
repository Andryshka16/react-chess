{"ast":null,"code":"// import {turn, turns} from \"../Move piece/Move piece\";\n// import {gameField} from \"../../Gamefield\";\n// export let checkCRD = []\n// export function checkForChecks([a,b], color=turns[turn]){\n//     let check = 0\n//     function checkCell([x,y], piece, i) {\n//         let name = gameField[y][x]\n//         if (name !== \"0\" && name !== turns[color] + \"K\") {\n//             if (name === color + \"K\" && Math.abs(i) === 1) {\n//                 checkCRD = [x, y]\n//                 check += 1\n//             }\n//             else if (name === color + \"Q\" || name === color + piece) {\n//                 checkCRD = [x, y]\n//                 check += 1\n//             }\n//             else if (piece === \"B\" && name === color + \"P\"\n//                 && (color === \"w\"? 1 : -1) === i) {\n//                 checkCRD = [x, y]\n//                 check += 1\n//             }\n//             return true\n//         }\n//     }\n//     // Rook check\n//     for (let i = 1; a + i < 8; i++){\n//         if(checkCell([a + i, b],\"R\", i)){\n//             break\n//         }\n//     }\n//     for (let i = 1; a - i >=  0; i++) {\n//         if(checkCell([a - i, b],\"R\", i)){\n//             break\n//         }\n//     }\n//     for (let i = 1; b + i < 8; i++){\n//         if(checkCell([a, b + i],\"R\", i)){\n//             break\n//         }\n//     }\n//     for (let i = 1; b - i >= 0; i++){\n//         if(checkCell([a, b - i],\"R\", i)){\n//             break\n//         }\n//     }\n//     // Bishop check\n//     for (let i = 1; a + i < 8 && b + i < 8; i++){\n//         if(checkCell([a + i, b + i],\"B\", i)){\n//             break\n//         }\n//     }\n//     for (let i = 1; a - i >= 0 && b - i >= 0; i++){\n//         if(checkCell([a - i, b - i],\"B\", -i)){\n//             break\n//         }\n//     }\n//     for (let i = 1; b + i < 8 && a - i >= 0; i++){\n//         if(checkCell([a - i, b + i],\"B\", i)){\n//             break\n//         }\n//     }\n//     for (let i = 1; b - i >= 0 && a + i < 8; i++){\n//         if(checkCell([a + i, b - i],\"B\", -i)){\n//             break\n//         }\n//     }\n//     let knights = [\n//       [ a - 2, b - 1 ],  [ a - 1, b + 2 ],\n//       [ a - 2, b + 1 ],  [ a + 1, b + 2 ],\n//       [ a + 2, b - 1 ],  [ a - 1, b - 2 ],\n//       [ a + 2, b + 1 ],  [ a + 1, b - 2 ]\n//     ]\n//     knights = knights.filter(([x,y])=>\n//         x >= 0 && x < 8 &&\n//         y >= 0 && y < 8 &&\n//         gameField[y][x][0] !== turn\n//     )\n//     knights.forEach(([x,y])=>{\n//         if (gameField[y][x][1] === \"N\"){\n//             checkCRD = [x,y]\n//             check += 1\n//         }\n//     })\n//     return check\n// }","map":{"version":3,"names":[],"sources":["C:/Users/alapc/OneDrive/Documents/Programming/chess/src/Chessboard/Game/Pieces/Logic/King activity/Checks.js"],"sourcesContent":["// import {turn, turns} from \"../Move piece/Move piece\";\r\n// import {gameField} from \"../../Gamefield\";\r\n// export let checkCRD = []\r\n\r\n// export function checkForChecks([a,b], color=turns[turn]){\r\n\r\n//     let check = 0\r\n\r\n//     function checkCell([x,y], piece, i) {\r\n\r\n//         let name = gameField[y][x]\r\n\r\n//         if (name !== \"0\" && name !== turns[color] + \"K\") {\r\n\r\n//             if (name === color + \"K\" && Math.abs(i) === 1) {\r\n//                 checkCRD = [x, y]\r\n//                 check += 1\r\n//             }\r\n\r\n//             else if (name === color + \"Q\" || name === color + piece) {\r\n//                 checkCRD = [x, y]\r\n//                 check += 1\r\n//             }\r\n\r\n//             else if (piece === \"B\" && name === color + \"P\"\r\n//                 && (color === \"w\"? 1 : -1) === i) {\r\n//                 checkCRD = [x, y]\r\n//                 check += 1\r\n//             }\r\n\r\n//             return true\r\n//         }\r\n//     }\r\n\r\n//     // Rook check\r\n\r\n//     for (let i = 1; a + i < 8; i++){\r\n//         if(checkCell([a + i, b],\"R\", i)){\r\n//             break\r\n//         }\r\n//     }\r\n//     for (let i = 1; a - i >=  0; i++) {\r\n//         if(checkCell([a - i, b],\"R\", i)){\r\n//             break\r\n//         }\r\n//     }\r\n//     for (let i = 1; b + i < 8; i++){\r\n//         if(checkCell([a, b + i],\"R\", i)){\r\n//             break\r\n//         }\r\n//     }\r\n//     for (let i = 1; b - i >= 0; i++){\r\n//         if(checkCell([a, b - i],\"R\", i)){\r\n//             break\r\n//         }\r\n//     }\r\n\r\n//     // Bishop check\r\n\r\n//     for (let i = 1; a + i < 8 && b + i < 8; i++){\r\n//         if(checkCell([a + i, b + i],\"B\", i)){\r\n//             break\r\n//         }\r\n//     }\r\n//     for (let i = 1; a - i >= 0 && b - i >= 0; i++){\r\n//         if(checkCell([a - i, b - i],\"B\", -i)){\r\n//             break\r\n//         }\r\n//     }\r\n//     for (let i = 1; b + i < 8 && a - i >= 0; i++){\r\n//         if(checkCell([a - i, b + i],\"B\", i)){\r\n//             break\r\n//         }\r\n//     }\r\n//     for (let i = 1; b - i >= 0 && a + i < 8; i++){\r\n//         if(checkCell([a + i, b - i],\"B\", -i)){\r\n//             break\r\n//         }\r\n//     }\r\n\r\n//     let knights = [\r\n//       [ a - 2, b - 1 ],  [ a - 1, b + 2 ],\r\n//       [ a - 2, b + 1 ],  [ a + 1, b + 2 ],\r\n//       [ a + 2, b - 1 ],  [ a - 1, b - 2 ],\r\n//       [ a + 2, b + 1 ],  [ a + 1, b - 2 ]\r\n//     ]\r\n\r\n//     knights = knights.filter(([x,y])=>\r\n//         x >= 0 && x < 8 &&\r\n//         y >= 0 && y < 8 &&\r\n//         gameField[y][x][0] !== turn\r\n//     )\r\n\r\n//     knights.forEach(([x,y])=>{\r\n//         if (gameField[y][x][1] === \"N\"){\r\n//             checkCRD = [x,y]\r\n//             check += 1\r\n//         }\r\n//     })\r\n\r\n//     return check\r\n// }"],"mappings":"AAAA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA"},"metadata":{},"sourceType":"module"}