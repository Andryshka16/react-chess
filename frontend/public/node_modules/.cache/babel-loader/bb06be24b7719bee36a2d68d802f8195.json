{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport gameField from './Gamefield';\nimport { current } from '@reduxjs/toolkit';\nconst turns = {\n  \"b\": \"w\",\n  \"w\": \"b\"\n};\nconst initialState = {\n  gameField,\n  turn: \"w\",\n  colors: [\"rgb(255,195,151)\", \"rgb(39,39,39)\"],\n  selected: null,\n  nextMoves: [],\n  check: null,\n  previousMove: [],\n  castlingMoved: [],\n  coverMoves: [],\n  enpassing: null,\n  followingPiece: {\n    target: null,\n    startingX: null,\n    startingY: null\n  }\n};\nconst gameField2 = [['0', '0', '0', '0', '0', '0', '0', 'bR'], ['0', '0', '0', '0', '0', 'bK', '0', '0'], ['0', 'wB', '0', '0', '0', '0', '0', '0'], ['0', '0', '0', '0', '0', '0', '0', '0'], ['0', '0', '0', '0', '0', '0', '0', '0'], ['0', '0', '0', '0', '0', '0', '0', '0'], ['0', '0', '0', '0', '0', '0', '0', '0'], ['0', \"0\", '0', 'wQ', 'wK', '0', '0', 'wR']];\nconst chessSlice = createSlice({\n  name: \"chess\",\n  initialState,\n  reducers: {\n    clearNextMoves: state => {\n      state.nextMoves = [];\n    },\n    setNextMoves: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      state.nextMoves = payload;\n    },\n    setCheck: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      state.check = payload;\n    },\n    setTurn: (state, _ref3) => {\n      let {\n        payload\n      } = _ref3;\n      state.turn = payload;\n    },\n    setSelected: (state, _ref4) => {\n      let {\n        payload\n      } = _ref4;\n      state.selected = payload;\n    },\n    setFollowing: (state, _ref5) => {\n      let {\n        payload\n      } = _ref5;\n      state.followingPiece = payload;\n    },\n    movePiece: (state, _ref6) => {\n      let {\n        payload\n      } = _ref6;\n      const [x2, y2] = payload;\n      const {\n        x,\n        y,\n        name\n      } = state.selected;\n\n      if (name[1] === \"K\" && Math.abs(x2 - x) > 1) {\n        const k = x2 > x ? 1 : -1;\n        state.gameField[y][4 + k] = name[0] + \"R\";\n        state.gameField[y][4 + 2 * k] = name[0] + \"K\";\n        state.gameField[y][4] = \"0\";\n        state.gameField[y][k > 0 ? 7 : 0] = \"0\";\n      } else {\n        state.gameField[y2][x2] = name;\n        state.gameField[y][x] = \"0\";\n      }\n\n      if (name[0] === \"P\" && x !== x2 && state.gameField[y2][x2] === \"0\") {\n        state.gameField[y][x2] = \"0\";\n      }\n\n      state.enPassing = name[1] === \"P\" && Math.abs(y2 - y) === 2 ? {\n        x2,\n        y2\n      } : null;\n      state.turn = turns[state.turn];\n      state.selected = null;\n      state.nextMoves = [];\n    }\n  }\n});\nexport default chessSlice.reducer;\nexport const {\n  clearNextMoves,\n  setNextMoves,\n  setCheck,\n  setTurn,\n  setSelected,\n  setFollowing,\n  movePiece,\n  castle\n} = chessSlice.actions;","map":{"version":3,"names":["createSlice","gameField","current","turns","initialState","turn","colors","selected","nextMoves","check","previousMove","castlingMoved","coverMoves","enpassing","followingPiece","target","startingX","startingY","gameField2","chessSlice","name","reducers","clearNextMoves","state","setNextMoves","payload","setCheck","setTurn","setSelected","setFollowing","movePiece","x2","y2","x","y","Math","abs","k","enPassing","reducer","castle","actions"],"sources":["C:/Users/alapc/OneDrive/Documents/Programming/chess/src/features/chess/chessSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\nimport gameField from './Gamefield'\r\n\r\nimport { current } from '@reduxjs/toolkit'\r\n\r\nconst turns = {\r\n    \"b\": \"w\",\r\n    \"w\": \"b\"\r\n}\r\n\r\nconst initialState = {\r\n    gameField,\r\n    turn: \"w\",\r\n    colors: [\r\n        \"rgb(255,195,151)\",\r\n        \"rgb(39,39,39)\"\r\n    ],\r\n    selected: null,\r\n    nextMoves: [],\r\n    check: null,\r\n    previousMove: [],\r\n    castlingMoved: [],\r\n    coverMoves: [],\r\n    enpassing: null,\r\n    followingPiece: {\r\n        target: null,\r\n        startingX: null,\r\n        startingY: null,\r\n    }\r\n\r\n}\r\n\r\nconst gameField2 = [\r\n    [ '0', '0', '0', '0', '0', '0', '0', 'bR' ],\r\n    [ '0', '0', '0', '0', '0', 'bK', '0', '0' ],\r\n    [ '0', 'wB', '0', '0', '0', '0', '0', '0' ],\r\n    [ '0', '0', '0', '0', '0', '0', '0', '0' ],\r\n    [ '0', '0', '0', '0', '0', '0', '0', '0' ],\r\n    [ '0', '0', '0', '0', '0', '0', '0', '0' ],\r\n    [ '0', '0', '0', '0', '0', '0', '0', '0' ],\r\n    [ '0', \"0\", '0', 'wQ', 'wK', '0', '0', 'wR' ]\r\n]\r\n\r\nconst chessSlice = createSlice({\r\n    name: \"chess\",\r\n    initialState,\r\n    reducers: {\r\n        clearNextMoves: (state) => {\r\n            state.nextMoves = []\r\n        },\r\n        setNextMoves: (state, {payload}) => {\r\n            state.nextMoves = payload\r\n        },\r\n        setCheck: (state, {payload}) => {\r\n            state.check = payload\r\n        },\r\n        setTurn: (state, {payload}) => {\r\n            state.turn = payload\r\n        },\r\n        setSelected: (state, { payload }) => {\r\n            state.selected = payload\r\n        },\r\n        setFollowing: (state, { payload }) => {\r\n            state.followingPiece = payload\r\n        },\r\n        movePiece: (state, { payload }) => {\r\n            const [x2, y2] = payload\r\n            const { x, y, name } = state.selected\r\n\r\n            if (name[1] === \"K\" && Math.abs(x2 - x) > 1) {\r\n                const k = x2 > x ? 1 : -1\r\n                state.gameField[y][4 + k] = name[0] + \"R\"\r\n                state.gameField[y][4 + 2 * k] = name[0] + \"K\"\r\n                state.gameField[y][4] = \"0\"\r\n                state.gameField[y][k > 0 ? 7 : 0] = \"0\"\r\n            }\r\n            else {\r\n                state.gameField[y2][x2] = name\r\n                state.gameField[y][x] = \"0\"\r\n            }\r\n\r\n            if (name[0] === \"P\" && x !== x2 && state.gameField[y2][x2] === \"0\"){\r\n                state.gameField[y][x2] = \"0\"\r\n            }\r\n\r\n            state.enPassing = name[1] === \"P\" && Math.abs(y2 - y) === 2\r\n                ? {x2, y2}\r\n                : null\r\n            \r\n            state.turn = turns[state.turn]\r\n            state.selected = null\r\n            state.nextMoves = []\r\n        },\r\n        \r\n    }\r\n})\r\n\r\nexport default chessSlice.reducer\r\n\r\nexport const {\r\n    clearNextMoves,\r\n    setNextMoves,\r\n    setCheck,\r\n    setTurn,\r\n    setSelected,\r\n    setFollowing,\r\n    movePiece,\r\n    castle,\r\n} = chessSlice.actions\r\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,SAASC,OAAT,QAAwB,kBAAxB;AAEA,MAAMC,KAAK,GAAG;EACV,KAAK,GADK;EAEV,KAAK;AAFK,CAAd;AAKA,MAAMC,YAAY,GAAG;EACjBH,SADiB;EAEjBI,IAAI,EAAE,GAFW;EAGjBC,MAAM,EAAE,CACJ,kBADI,EAEJ,eAFI,CAHS;EAOjBC,QAAQ,EAAE,IAPO;EAQjBC,SAAS,EAAE,EARM;EASjBC,KAAK,EAAE,IATU;EAUjBC,YAAY,EAAE,EAVG;EAWjBC,aAAa,EAAE,EAXE;EAYjBC,UAAU,EAAE,EAZK;EAajBC,SAAS,EAAE,IAbM;EAcjBC,cAAc,EAAE;IACZC,MAAM,EAAE,IADI;IAEZC,SAAS,EAAE,IAFC;IAGZC,SAAS,EAAE;EAHC;AAdC,CAArB;AAsBA,MAAMC,UAAU,GAAG,CACf,CAAE,GAAF,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,GAAtB,EAA2B,GAA3B,EAAgC,GAAhC,EAAqC,IAArC,CADe,EAEf,CAAE,GAAF,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,GAAtB,EAA2B,IAA3B,EAAiC,GAAjC,EAAsC,GAAtC,CAFe,EAGf,CAAE,GAAF,EAAO,IAAP,EAAa,GAAb,EAAkB,GAAlB,EAAuB,GAAvB,EAA4B,GAA5B,EAAiC,GAAjC,EAAsC,GAAtC,CAHe,EAIf,CAAE,GAAF,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,GAAtB,EAA2B,GAA3B,EAAgC,GAAhC,EAAqC,GAArC,CAJe,EAKf,CAAE,GAAF,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,GAAtB,EAA2B,GAA3B,EAAgC,GAAhC,EAAqC,GAArC,CALe,EAMf,CAAE,GAAF,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,GAAtB,EAA2B,GAA3B,EAAgC,GAAhC,EAAqC,GAArC,CANe,EAOf,CAAE,GAAF,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,GAAtB,EAA2B,GAA3B,EAAgC,GAAhC,EAAqC,GAArC,CAPe,EAQf,CAAE,GAAF,EAAO,GAAP,EAAY,GAAZ,EAAiB,IAAjB,EAAuB,IAAvB,EAA6B,GAA7B,EAAkC,GAAlC,EAAuC,IAAvC,CARe,CAAnB;AAWA,MAAMC,UAAU,GAAGnB,WAAW,CAAC;EAC3BoB,IAAI,EAAE,OADqB;EAE3BhB,YAF2B;EAG3BiB,QAAQ,EAAE;IACNC,cAAc,EAAGC,KAAD,IAAW;MACvBA,KAAK,CAACf,SAAN,GAAkB,EAAlB;IACH,CAHK;IAINgB,YAAY,EAAE,CAACD,KAAD,WAAsB;MAAA,IAAd;QAACE;MAAD,CAAc;MAChCF,KAAK,CAACf,SAAN,GAAkBiB,OAAlB;IACH,CANK;IAONC,QAAQ,EAAE,CAACH,KAAD,YAAsB;MAAA,IAAd;QAACE;MAAD,CAAc;MAC5BF,KAAK,CAACd,KAAN,GAAcgB,OAAd;IACH,CATK;IAUNE,OAAO,EAAE,CAACJ,KAAD,YAAsB;MAAA,IAAd;QAACE;MAAD,CAAc;MAC3BF,KAAK,CAAClB,IAAN,GAAaoB,OAAb;IACH,CAZK;IAaNG,WAAW,EAAE,CAACL,KAAD,YAAwB;MAAA,IAAhB;QAAEE;MAAF,CAAgB;MACjCF,KAAK,CAAChB,QAAN,GAAiBkB,OAAjB;IACH,CAfK;IAgBNI,YAAY,EAAE,CAACN,KAAD,YAAwB;MAAA,IAAhB;QAAEE;MAAF,CAAgB;MAClCF,KAAK,CAACT,cAAN,GAAuBW,OAAvB;IACH,CAlBK;IAmBNK,SAAS,EAAE,CAACP,KAAD,YAAwB;MAAA,IAAhB;QAAEE;MAAF,CAAgB;MAC/B,MAAM,CAACM,EAAD,EAAKC,EAAL,IAAWP,OAAjB;MACA,MAAM;QAAEQ,CAAF;QAAKC,CAAL;QAAQd;MAAR,IAAiBG,KAAK,CAAChB,QAA7B;;MAEA,IAAIa,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAZ,IAAmBe,IAAI,CAACC,GAAL,CAASL,EAAE,GAAGE,CAAd,IAAmB,CAA1C,EAA6C;QACzC,MAAMI,CAAC,GAAGN,EAAE,GAAGE,CAAL,GAAS,CAAT,GAAa,CAAC,CAAxB;QACAV,KAAK,CAACtB,SAAN,CAAgBiC,CAAhB,EAAmB,IAAIG,CAAvB,IAA4BjB,IAAI,CAAC,CAAD,CAAJ,GAAU,GAAtC;QACAG,KAAK,CAACtB,SAAN,CAAgBiC,CAAhB,EAAmB,IAAI,IAAIG,CAA3B,IAAgCjB,IAAI,CAAC,CAAD,CAAJ,GAAU,GAA1C;QACAG,KAAK,CAACtB,SAAN,CAAgBiC,CAAhB,EAAmB,CAAnB,IAAwB,GAAxB;QACAX,KAAK,CAACtB,SAAN,CAAgBiC,CAAhB,EAAmBG,CAAC,GAAG,CAAJ,GAAQ,CAAR,GAAY,CAA/B,IAAoC,GAApC;MACH,CAND,MAOK;QACDd,KAAK,CAACtB,SAAN,CAAgB+B,EAAhB,EAAoBD,EAApB,IAA0BX,IAA1B;QACAG,KAAK,CAACtB,SAAN,CAAgBiC,CAAhB,EAAmBD,CAAnB,IAAwB,GAAxB;MACH;;MAED,IAAIb,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAZ,IAAmBa,CAAC,KAAKF,EAAzB,IAA+BR,KAAK,CAACtB,SAAN,CAAgB+B,EAAhB,EAAoBD,EAApB,MAA4B,GAA/D,EAAmE;QAC/DR,KAAK,CAACtB,SAAN,CAAgBiC,CAAhB,EAAmBH,EAAnB,IAAyB,GAAzB;MACH;;MAEDR,KAAK,CAACe,SAAN,GAAkBlB,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAZ,IAAmBe,IAAI,CAACC,GAAL,CAASJ,EAAE,GAAGE,CAAd,MAAqB,CAAxC,GACZ;QAACH,EAAD;QAAKC;MAAL,CADY,GAEZ,IAFN;MAIAT,KAAK,CAAClB,IAAN,GAAaF,KAAK,CAACoB,KAAK,CAAClB,IAAP,CAAlB;MACAkB,KAAK,CAAChB,QAAN,GAAiB,IAAjB;MACAgB,KAAK,CAACf,SAAN,GAAkB,EAAlB;IACH;EA9CK;AAHiB,CAAD,CAA9B;AAsDA,eAAeW,UAAU,CAACoB,OAA1B;AAEA,OAAO,MAAM;EACTjB,cADS;EAETE,YAFS;EAGTE,QAHS;EAITC,OAJS;EAKTC,WALS;EAMTC,YANS;EAOTC,SAPS;EAQTU;AARS,IASTrB,UAAU,CAACsB,OATR"},"metadata":{},"sourceType":"module"}