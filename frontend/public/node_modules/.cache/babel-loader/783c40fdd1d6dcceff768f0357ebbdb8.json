{"ast":null,"code":"import { drawDots } from \"../../../Indicators/ShowNextMoves\";\nimport getBishopMoves from \"./Piece moves/Bishop\";\nimport getRookMoves from \"./Piece moves/Rook\";\nimport getKnightMoves from \"./Piece moves/Knight\";\nimport getKingMoves from \"./Piece moves/King\";\nimport getPawnMoves from \"./Piece moves/Pawn\";\nimport filterNextMoves from \"./Filtration\";\nexport let nextMoves = [];\nexport const clearNextMoves = () => nextMoves = [];\nexport function getNextMove(gameField, _ref, returnArray) {\n  let [x, y] = _ref;\n  nextMoves = [];\n  let piece = gameField[y][x];\n  const steps = {\n    \"K\": () => getKingMoves(x, y),\n    \"N\": () => getKnightMoves(x, y),\n    \"Q\": () => {\n      getBishopMoves(x, y);\n      getRookMoves(x, y);\n    },\n    \"B\": () => getBishopMoves(x, y),\n    \"R\": () => getRookMoves(x, y),\n    \"P\": () => getPawnMoves(x, y)\n  };\n  steps[piece[1]]();\n  nextMoves = filterNextMoves(x, y);\n\n  if (returnArray) {\n    const copy = nextMoves;\n    nextMoves = [];\n    return copy;\n  }\n\n  drawDots();\n}","map":{"version":3,"names":["drawDots","getBishopMoves","getRookMoves","getKnightMoves","getKingMoves","getPawnMoves","filterNextMoves","nextMoves","clearNextMoves","getNextMove","gameField","returnArray","x","y","piece","steps","copy"],"sources":["C:/Users/alapc/OneDrive/Documents/Programming/chess/src/Chessboard/Game/Pieces/Logic/Next moves/NextMoves.js"],"sourcesContent":["import {drawDots} from \"../../../Indicators/ShowNextMoves\";\r\nimport getBishopMoves from \"./Piece moves/Bishop\";\r\nimport getRookMoves from \"./Piece moves/Rook\";\r\nimport getKnightMoves from \"./Piece moves/Knight\";\r\nimport getKingMoves from \"./Piece moves/King\";\r\nimport getPawnMoves from \"./Piece moves/Pawn\";\r\nimport filterNextMoves from \"./Filtration\";\r\n\r\nexport let nextMoves = []\r\n\r\nexport const clearNextMoves = () => nextMoves = []\r\n\r\nexport function getNextMove(gameField, [x,y], returnArray){\r\n\r\n    nextMoves = []\r\n    let piece = gameField[y][x]\r\n\r\n    const steps = {\r\n        \"K\": () => getKingMoves(x, y),\r\n        \"N\": () => getKnightMoves(x, y),\r\n        \"Q\": () => {\r\n            getBishopMoves(x, y)\r\n            getRookMoves(x, y)\r\n        },\r\n        \"B\": () => getBishopMoves(x, y),\r\n        \"R\": () => getRookMoves(x, y),\r\n        \"P\": () => getPawnMoves(x, y),\r\n    }\r\n\r\n    steps[piece[1]]()\r\n\r\n    nextMoves = filterNextMoves(x, y)\r\n\r\n    if (returnArray){\r\n        const copy = nextMoves\r\n        nextMoves = []\r\n        return copy\r\n    }\r\n\r\n    drawDots()\r\n}\r\n\r\n"],"mappings":"AAAA,SAAQA,QAAR,QAAuB,mCAAvB;AACA,OAAOC,cAAP,MAA2B,sBAA3B;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AACA,OAAOC,cAAP,MAA2B,sBAA3B;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AACA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,IAAIC,SAAS,GAAG,EAAhB;AAEP,OAAO,MAAMC,cAAc,GAAG,MAAMD,SAAS,GAAG,EAAzC;AAEP,OAAO,SAASE,WAAT,CAAqBC,SAArB,QAAuCC,WAAvC,EAAmD;EAAA,IAAnB,CAACC,CAAD,EAAGC,CAAH,CAAmB;EAEtDN,SAAS,GAAG,EAAZ;EACA,IAAIO,KAAK,GAAGJ,SAAS,CAACG,CAAD,CAAT,CAAaD,CAAb,CAAZ;EAEA,MAAMG,KAAK,GAAG;IACV,KAAK,MAAMX,YAAY,CAACQ,CAAD,EAAIC,CAAJ,CADb;IAEV,KAAK,MAAMV,cAAc,CAACS,CAAD,EAAIC,CAAJ,CAFf;IAGV,KAAK,MAAM;MACPZ,cAAc,CAACW,CAAD,EAAIC,CAAJ,CAAd;MACAX,YAAY,CAACU,CAAD,EAAIC,CAAJ,CAAZ;IACH,CANS;IAOV,KAAK,MAAMZ,cAAc,CAACW,CAAD,EAAIC,CAAJ,CAPf;IAQV,KAAK,MAAMX,YAAY,CAACU,CAAD,EAAIC,CAAJ,CARb;IASV,KAAK,MAAMR,YAAY,CAACO,CAAD,EAAIC,CAAJ;EATb,CAAd;EAYAE,KAAK,CAACD,KAAK,CAAC,CAAD,CAAN,CAAL;EAEAP,SAAS,GAAGD,eAAe,CAACM,CAAD,EAAIC,CAAJ,CAA3B;;EAEA,IAAIF,WAAJ,EAAgB;IACZ,MAAMK,IAAI,GAAGT,SAAb;IACAA,SAAS,GAAG,EAAZ;IACA,OAAOS,IAAP;EACH;;EAEDhB,QAAQ;AACX"},"metadata":{},"sourceType":"module"}