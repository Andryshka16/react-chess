{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport kingCoordinates from './Find king';\nimport useCheckForDraw from './Draw';\nimport useCheckForChecks from './Checks';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setCheck } from '../../../../../features/chess/chessSlice';\nexport default function useCheckSituation() {\n  _s();\n\n  const {\n    turn\n  } = useSelector(store => store.chess);\n  const dispatch = useDispatch();\n  const checkForChecks = useCheckForChecks();\n  const checkForDraw = useCheckForDraw();\n  const king = kingCoordinates(turn + 'K');\n  return () => {\n    const [amount, check] = checkForChecks(king);\n\n    if (length) {\n      console.log('CHECK!');\n      dispatch(setCheck(king)); // if (checkMate(king, checkCRD)) {\n      // \tconsole.log('MATE, GAME OVER!')\n      // }\n    } else {\n      dispatch(setCheck(null));\n    }\n\n    if (checkForDraw() && !checkForChecks(king)) {\n      console.log('DRAW, GAME OVER!');\n    }\n  };\n}\n\n_s(useCheckSituation, \"JHVIPwzzPkD+ssK1H+skkXnW5xs=\", false, function () {\n  return [useSelector, useDispatch, useCheckForChecks, useCheckForDraw];\n});","map":{"version":3,"names":["kingCoordinates","useCheckForDraw","useCheckForChecks","useDispatch","useSelector","setCheck","useCheckSituation","turn","store","chess","dispatch","checkForChecks","checkForDraw","king","amount","check","length","console","log"],"sources":["C:/Users/alapc/OneDrive/Documents/Programming/chess/src/Chessboard/Game/Pieces/Logic/King activity/Check situation.js"],"sourcesContent":["import kingCoordinates from './Find king'\r\nimport useCheckForDraw from './Draw'\r\nimport useCheckForChecks from './Checks'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setCheck } from '../../../../../features/chess/chessSlice'\r\n\r\nexport default function useCheckSituation() {\r\n\tconst { turn } = useSelector((store) => store.chess)\r\n\tconst dispatch = useDispatch()\r\n\r\n\tconst checkForChecks = useCheckForChecks()\r\n\tconst checkForDraw = useCheckForDraw()\r\n\tconst king = kingCoordinates(turn + 'K')\r\n\r\n\treturn () => {\r\n\t\tconst [amount, check] = checkForChecks(king)\r\n\t\tif (length) {\r\n\t\t\tconsole.log('CHECK!')\r\n\t\t\tdispatch(setCheck(king))\r\n\r\n\t\t\t// if (checkMate(king, checkCRD)) {\r\n\t\t\t// \tconsole.log('MATE, GAME OVER!')\r\n\t\t\t// }\r\n\t\t} else {\r\n\t\t\tdispatch(setCheck(null))\r\n\t\t}\r\n\t\tif (checkForDraw() && !checkForChecks(king)) {\r\n\t\t\tconsole.log('DRAW, GAME OVER!')\r\n\t\t}\r\n\t}\r\n}\r\n"],"mappings":";;AAAA,OAAOA,eAAP,MAA4B,aAA5B;AACA,OAAOC,eAAP,MAA4B,QAA5B;AACA,OAAOC,iBAAP,MAA8B,UAA9B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,QAAT,QAAyB,0CAAzB;AAEA,eAAe,SAASC,iBAAT,GAA6B;EAAA;;EAC3C,MAAM;IAAEC;EAAF,IAAWH,WAAW,CAAEI,KAAD,IAAWA,KAAK,CAACC,KAAlB,CAA5B;EACA,MAAMC,QAAQ,GAAGP,WAAW,EAA5B;EAEA,MAAMQ,cAAc,GAAGT,iBAAiB,EAAxC;EACA,MAAMU,YAAY,GAAGX,eAAe,EAApC;EACA,MAAMY,IAAI,GAAGb,eAAe,CAACO,IAAI,GAAG,GAAR,CAA5B;EAEA,OAAO,MAAM;IACZ,MAAM,CAACO,MAAD,EAASC,KAAT,IAAkBJ,cAAc,CAACE,IAAD,CAAtC;;IACA,IAAIG,MAAJ,EAAY;MACXC,OAAO,CAACC,GAAR,CAAY,QAAZ;MACAR,QAAQ,CAACL,QAAQ,CAACQ,IAAD,CAAT,CAAR,CAFW,CAIX;MACA;MACA;IACA,CAPD,MAOO;MACNH,QAAQ,CAACL,QAAQ,CAAC,IAAD,CAAT,CAAR;IACA;;IACD,IAAIO,YAAY,MAAM,CAACD,cAAc,CAACE,IAAD,CAArC,EAA6C;MAC5CI,OAAO,CAACC,GAAR,CAAY,kBAAZ;IACA;EACD,CAfD;AAgBA;;GAxBuBZ,iB;UACNF,W,EACAD,W,EAEMD,iB,EACFD,e"},"metadata":{},"sourceType":"module"}