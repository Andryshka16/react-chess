{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport kingCoordinates from '../../King activity/Find king';\nimport checkForDraw from '../../King activity/Draw';\nimport useCheckForChecks from '../King activity/Checks';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setCheck } from '../../../../../features/chess/chessSlice';\nexport let coverMoves = [];\nexport const clearCoverMoves = () => coverMoves = [];\nexport default function useCheckSituation() {\n  _s();\n\n  const {\n    coverMoves,\n    check\n  } = useSelector(store => store.coverMoves);\n  const dispatch = useDispatch();\n  const checkForChecks = useCheckForChecks();\n  const king = kingCoordinates(turn + 'K');\n  return () => {\n    if (checkForChecks(king)) {\n      console.log('CHECK!');\n      dispatch(setCheck(king)); // if (checkMate(king, checkCRD)) {\n      // \tconsole.log('MATE, GAME OVER!')\n      // }\n    } // if (checkForDraw(turn) && !checkForChecks(king)) {\n    // \tconsole.log('DRAW, GAME OVER!')\n    // }\n\n  };\n}\n\n_s(useCheckSituation, \"BoWYFfvez8c8WcXQpPmJpPc6ndo=\", false, function () {\n  return [useSelector, useDispatch, useCheckForChecks];\n});","map":{"version":3,"names":["kingCoordinates","checkForDraw","useCheckForChecks","useDispatch","useSelector","setCheck","coverMoves","clearCoverMoves","useCheckSituation","check","store","dispatch","checkForChecks","king","turn","console","log"],"sources":["C:/Users/alapc/OneDrive/Documents/Programming/chess/src/Chessboard/Game/Pieces/Logic/Move piece/Check situation.js"],"sourcesContent":["import kingCoordinates from '../../King activity/Find king'\r\nimport checkForDraw from '../../King activity/Draw'\r\nimport useCheckForChecks from '../King activity/Checks'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setCheck } from '../../../../../features/chess/chessSlice'\r\n\r\nexport let coverMoves = []\r\nexport const clearCoverMoves = () => (coverMoves = [])\r\n\r\nexport default function useCheckSituation() {\r\n\tconst { coverMoves, check } = useSelector((store) => store.coverMoves)\r\n\tconst dispatch = useDispatch()\r\n\tconst checkForChecks = useCheckForChecks()\r\n    const king = kingCoordinates(turn + 'K')\r\n    \r\n    return ()=>{\r\n\r\n        if (checkForChecks(king)) {\r\n            console.log('CHECK!')\r\n            dispatch(setCheck(king))\r\n\r\n            // if (checkMate(king, checkCRD)) {\r\n            // \tconsole.log('MATE, GAME OVER!')\r\n            // }\r\n        }\r\n\r\n        // if (checkForDraw(turn) && !checkForChecks(king)) {\r\n        // \tconsole.log('DRAW, GAME OVER!')\r\n            // }\r\n    }\r\n}\r\n"],"mappings":";;AAAA,OAAOA,eAAP,MAA4B,+BAA5B;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,OAAOC,iBAAP,MAA8B,yBAA9B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,QAAT,QAAyB,0CAAzB;AAEA,OAAO,IAAIC,UAAU,GAAG,EAAjB;AACP,OAAO,MAAMC,eAAe,GAAG,MAAOD,UAAU,GAAG,EAA5C;AAEP,eAAe,SAASE,iBAAT,GAA6B;EAAA;;EAC3C,MAAM;IAAEF,UAAF;IAAcG;EAAd,IAAwBL,WAAW,CAAEM,KAAD,IAAWA,KAAK,CAACJ,UAAlB,CAAzC;EACA,MAAMK,QAAQ,GAAGR,WAAW,EAA5B;EACA,MAAMS,cAAc,GAAGV,iBAAiB,EAAxC;EACG,MAAMW,IAAI,GAAGb,eAAe,CAACc,IAAI,GAAG,GAAR,CAA5B;EAEA,OAAO,MAAI;IAEP,IAAIF,cAAc,CAACC,IAAD,CAAlB,EAA0B;MACtBE,OAAO,CAACC,GAAR,CAAY,QAAZ;MACAL,QAAQ,CAACN,QAAQ,CAACQ,IAAD,CAAT,CAAR,CAFsB,CAItB;MACA;MACA;IACH,CATM,CAWP;IACA;IACI;;EACP,CAdD;AAeH;;GArBuBL,iB;UACOJ,W,EACbD,W,EACMD,iB"},"metadata":{},"sourceType":"module"}