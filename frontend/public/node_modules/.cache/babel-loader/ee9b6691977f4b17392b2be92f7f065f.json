{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport gameField from './Gamefield';\nconst initialState = {\n  gameField,\n  turn: \"w\",\n  colors: [\"rgb(255,195,151)\", \"rgb(39,39,39)\"],\n  selected: null,\n  nextMoves: [],\n  check: null,\n  previousMove: [],\n  castlingMoved: [],\n  coverMoves: []\n};\nconst chessSlice = createSlice({\n  name: \"chess\",\n  initialState,\n  reducers: {\n    clearNextMoves: state => {\n      state.nextMoves = [];\n    },\n    setNextMoves: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      state.nextMoves = payload;\n    },\n    setCheck: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      state.check = payload;\n    },\n    setTurn: (state, _ref3) => {\n      let {\n        payload\n      } = _ref3;\n      state.turn = payload;\n    },\n    setSelected: (state, _ref4) => {\n      let {\n        payload\n      } = _ref4;\n      state.selected = payload;\n    },\n    movePiece: () => {}\n  }\n});\nexport default chessSlice.reducer;\nexport const {\n  clearNextMoves,\n  setNextMoves,\n  setCheck,\n  setTurn,\n  setSelected\n} = chessSlice.actions;","map":{"version":3,"names":["createSlice","gameField","initialState","turn","colors","selected","nextMoves","check","previousMove","castlingMoved","coverMoves","chessSlice","name","reducers","clearNextMoves","state","setNextMoves","payload","setCheck","setTurn","setSelected","movePiece","reducer","actions"],"sources":["C:/Users/alapc/OneDrive/Documents/Programming/chess/src/features/chess/chessSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\nimport gameField from './Gamefield'\r\n\r\nconst initialState = {\r\n    gameField,\r\n    turn: \"w\",\r\n    colors: [\r\n        \"rgb(255,195,151)\",\r\n        \"rgb(39,39,39)\"\r\n    ],\r\n    selected: null,\r\n    nextMoves: [],\r\n    check: null,\r\n    previousMove: [],\r\n    castlingMoved: [],\r\n    coverMoves: []\r\n\r\n}\r\n\r\nconst chessSlice = createSlice({\r\n    name: \"chess\",\r\n    initialState,\r\n    reducers: {\r\n        clearNextMoves: (state) => {\r\n            state.nextMoves = []\r\n        },\r\n        setNextMoves: (state, {payload}) => {\r\n            state.nextMoves = payload\r\n        },\r\n        setCheck: (state, {payload}) => {\r\n            state.check = payload\r\n        },\r\n        setTurn: (state, {payload}) => {\r\n            state.turn = payload\r\n        },\r\n        setSelected: (state, {payload}) => {\r\n            state.selected = payload\r\n        },\r\n        movePiece: () => {\r\n            \r\n        }\r\n        \r\n    }\r\n})\r\n\r\nexport default chessSlice.reducer\r\n\r\nexport const {clearNextMoves, setNextMoves, setCheck, setTurn, setSelected} = chessSlice.actions\r\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,MAAMC,YAAY,GAAG;EACjBD,SADiB;EAEjBE,IAAI,EAAE,GAFW;EAGjBC,MAAM,EAAE,CACJ,kBADI,EAEJ,eAFI,CAHS;EAOjBC,QAAQ,EAAE,IAPO;EAQjBC,SAAS,EAAE,EARM;EASjBC,KAAK,EAAE,IATU;EAUjBC,YAAY,EAAE,EAVG;EAWjBC,aAAa,EAAE,EAXE;EAYjBC,UAAU,EAAE;AAZK,CAArB;AAgBA,MAAMC,UAAU,GAAGX,WAAW,CAAC;EAC3BY,IAAI,EAAE,OADqB;EAE3BV,YAF2B;EAG3BW,QAAQ,EAAE;IACNC,cAAc,EAAGC,KAAD,IAAW;MACvBA,KAAK,CAACT,SAAN,GAAkB,EAAlB;IACH,CAHK;IAINU,YAAY,EAAE,CAACD,KAAD,WAAsB;MAAA,IAAd;QAACE;MAAD,CAAc;MAChCF,KAAK,CAACT,SAAN,GAAkBW,OAAlB;IACH,CANK;IAONC,QAAQ,EAAE,CAACH,KAAD,YAAsB;MAAA,IAAd;QAACE;MAAD,CAAc;MAC5BF,KAAK,CAACR,KAAN,GAAcU,OAAd;IACH,CATK;IAUNE,OAAO,EAAE,CAACJ,KAAD,YAAsB;MAAA,IAAd;QAACE;MAAD,CAAc;MAC3BF,KAAK,CAACZ,IAAN,GAAac,OAAb;IACH,CAZK;IAaNG,WAAW,EAAE,CAACL,KAAD,YAAsB;MAAA,IAAd;QAACE;MAAD,CAAc;MAC/BF,KAAK,CAACV,QAAN,GAAiBY,OAAjB;IACH,CAfK;IAgBNI,SAAS,EAAE,MAAM,CAEhB;EAlBK;AAHiB,CAAD,CAA9B;AA0BA,eAAeV,UAAU,CAACW,OAA1B;AAEA,OAAO,MAAM;EAACR,cAAD;EAAiBE,YAAjB;EAA+BE,QAA/B;EAAyCC,OAAzC;EAAkDC;AAAlD,IAAiET,UAAU,CAACY,OAAlF"},"metadata":{},"sourceType":"module"}