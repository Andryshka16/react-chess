{"ast":null,"code":"import { turn, turns } from \"../Move piece/Move piece\";\nimport { gameField } from \"../../Gamefield\";\nexport let checkCRD = [];\nexport function useCheckForChecks(_ref) {\n  let [a, b] = _ref;\n  let color = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : turns[turn];\n  let check = 0;\n\n  function checkCell(_ref2, piece, i) {\n    let [x, y] = _ref2;\n    let name = gameField[y][x];\n\n    if (name !== \"0\" && name !== turns[color] + \"K\") {\n      if (name === color + \"K\" && Math.abs(i) === 1) {\n        checkCRD = [x, y];\n        check += 1;\n      } else if (name === color + \"Q\" || name === color + piece) {\n        checkCRD = [x, y];\n        check += 1;\n      } else if (piece === \"B\" && name === color + \"P\" && (color === \"w\" ? 1 : -1) === i) {\n        checkCRD = [x, y];\n        check += 1;\n      }\n\n      return true;\n    }\n  } // Rook check\n\n\n  for (let i = 1; a + i < 8; i++) {\n    if (checkCell([a + i, b], \"R\", i)) {\n      break;\n    }\n  }\n\n  for (let i = 1; a - i >= 0; i++) {\n    if (checkCell([a - i, b], \"R\", i)) {\n      break;\n    }\n  }\n\n  for (let i = 1; b + i < 8; i++) {\n    if (checkCell([a, b + i], \"R\", i)) {\n      break;\n    }\n  }\n\n  for (let i = 1; b - i >= 0; i++) {\n    if (checkCell([a, b - i], \"R\", i)) {\n      break;\n    }\n  } // Bishop check\n\n\n  for (let i = 1; a + i < 8 && b + i < 8; i++) {\n    if (checkCell([a + i, b + i], \"B\", i)) {\n      break;\n    }\n  }\n\n  for (let i = 1; a - i >= 0 && b - i >= 0; i++) {\n    if (checkCell([a - i, b - i], \"B\", -i)) {\n      break;\n    }\n  }\n\n  for (let i = 1; b + i < 8 && a - i >= 0; i++) {\n    if (checkCell([a - i, b + i], \"B\", i)) {\n      break;\n    }\n  }\n\n  for (let i = 1; b - i >= 0 && a + i < 8; i++) {\n    if (checkCell([a + i, b - i], \"B\", -i)) {\n      break;\n    }\n  }\n\n  let knights = [[a - 2, b - 1], [a - 1, b + 2], [a - 2, b + 1], [a + 1, b + 2], [a + 2, b - 1], [a - 1, b - 2], [a + 2, b + 1], [a + 1, b - 2]];\n  knights = knights.filter(_ref3 => {\n    let [x, y] = _ref3;\n    return x >= 0 && x < 8 && y >= 0 && y < 8 && gameField[y][x][0] !== turn;\n  });\n  knights.forEach(_ref4 => {\n    let [x, y] = _ref4;\n\n    if (gameField[y][x][1] === \"N\") {\n      checkCRD = [x, y];\n      check += 1;\n    }\n  });\n  return check;\n}","map":{"version":3,"names":["turn","turns","gameField","checkCRD","useCheckForChecks","a","b","color","check","checkCell","piece","i","x","y","name","Math","abs","knights","filter","forEach"],"sources":["C:/Users/alapc/OneDrive/Documents/Programming/chess/src/Chessboard/Game/Pieces/Logic/King activity/Checks.js"],"sourcesContent":["import {turn, turns} from \"../Move piece/Move piece\";\r\nimport {gameField} from \"../../Gamefield\";\r\nexport let checkCRD = []\r\n\r\nexport function useCheckForChecks([a,b], color=turns[turn]){\r\n\r\n    let check = 0\r\n\r\n    function checkCell([x,y], piece, i) {\r\n\r\n        let name = gameField[y][x]\r\n\r\n        if (name !== \"0\" && name !== turns[color] + \"K\") {\r\n\r\n            if (name === color + \"K\" && Math.abs(i) === 1) {\r\n                checkCRD = [x, y]\r\n                check += 1\r\n            }\r\n\r\n            else if (name === color + \"Q\" || name === color + piece) {\r\n                checkCRD = [x, y]\r\n                check += 1\r\n            }\r\n\r\n            else if (piece === \"B\" && name === color + \"P\"\r\n                && (color === \"w\"? 1 : -1) === i) {\r\n                checkCRD = [x, y]\r\n                check += 1\r\n            }\r\n\r\n            return true\r\n        }\r\n    }\r\n\r\n    // Rook check\r\n\r\n    for (let i = 1; a + i < 8; i++){\r\n        if(checkCell([a + i, b],\"R\", i)){\r\n            break\r\n        }\r\n    }\r\n    for (let i = 1; a - i >=  0; i++) {\r\n        if(checkCell([a - i, b],\"R\", i)){\r\n            break\r\n        }\r\n    }\r\n    for (let i = 1; b + i < 8; i++){\r\n        if(checkCell([a, b + i],\"R\", i)){\r\n            break\r\n        }\r\n    }\r\n    for (let i = 1; b - i >= 0; i++){\r\n        if(checkCell([a, b - i],\"R\", i)){\r\n            break\r\n        }\r\n    }\r\n\r\n    // Bishop check\r\n\r\n    for (let i = 1; a + i < 8 && b + i < 8; i++){\r\n        if(checkCell([a + i, b + i],\"B\", i)){\r\n            break\r\n        }\r\n    }\r\n    for (let i = 1; a - i >= 0 && b - i >= 0; i++){\r\n        if(checkCell([a - i, b - i],\"B\", -i)){\r\n            break\r\n        }\r\n    }\r\n    for (let i = 1; b + i < 8 && a - i >= 0; i++){\r\n        if(checkCell([a - i, b + i],\"B\", i)){\r\n            break\r\n        }\r\n    }\r\n    for (let i = 1; b - i >= 0 && a + i < 8; i++){\r\n        if(checkCell([a + i, b - i],\"B\", -i)){\r\n            break\r\n        }\r\n    }\r\n\r\n    let knights = [\r\n      [ a - 2, b - 1 ],  [ a - 1, b + 2 ],\r\n      [ a - 2, b + 1 ],  [ a + 1, b + 2 ],\r\n      [ a + 2, b - 1 ],  [ a - 1, b - 2 ],\r\n      [ a + 2, b + 1 ],  [ a + 1, b - 2 ]\r\n    ]\r\n\r\n    knights = knights.filter(([x,y])=>\r\n        x >= 0 && x < 8 &&\r\n        y >= 0 && y < 8 &&\r\n        gameField[y][x][0] !== turn\r\n    )\r\n\r\n    knights.forEach(([x,y])=>{\r\n        if (gameField[y][x][1] === \"N\"){\r\n            checkCRD = [x,y]\r\n            check += 1\r\n        }\r\n    })\r\n\r\n    return check\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}